     1                                           ;设置堆栈段和栈指针 
     2                                           ;cs = 0x00000
     3 00000000 8CC8                             mov ax,cs      
     4 00000002 8ED0                             mov ss,ax
     5 00000004 BC007C                           mov sp,0x7c00
     6                                        
     7                                           ;计算GDT所在的逻辑段地址 
     8 00000007 2EA1[197D]                       mov ax,[cs:gdt_base+0x7c00]        ;低16位 
     9 0000000B 2E8B16[1B7D]                     mov dx,[cs:gdt_base+0x7c00+0x02]   ;高16位 
    10 00000010 BB1000                           mov bx,16        
    11 00000013 F7F3                             div bx                             ;换算成逻辑段地址 
    12 00000015 8ED8                             mov ds,ax                          ;令DS指向该段以进行操作（基址） 
    13 00000017 89D3                             mov bx,dx                          ;段内起始偏移地址 
    14                                        
    15                                           ;创建0#描述符，它是空描述符，这是处理器的要求
    16 00000019 66C70700000000                   mov dword [bx+0x00],0x00
    17 00000020 66C7470400000000                 mov dword [bx+0x04],0x00  
    18                                  
    19                                           ;创建#1描述符，保护模式下的代码段描述符
    20 00000028 66C74708FF01007C                 mov dword [bx+0x08],0x7c0001ff     
    21 00000030 66C7470C00984000                 mov dword [bx+0x0c],0x00409800     
    22                                  
    23                                           ;创建#2描述符，保护模式下的数据段描述符（文本模式下的显示缓冲区） 
    24 00000038 66C74710FFFF0080                 mov dword [bx+0x10],0x8000ffff     
    25 00000040 66C747140B924000                 mov dword [bx+0x14],0x0040920b     
    26                                  
    27                                           ;创建#3描述符，保护模式下的堆栈段描述符
    28 00000048 66C74718007A0000                 mov dword [bx+0x18],0x00007a00
    29 00000050 66C7471C00964000                 mov dword [bx+0x1c],0x00409600
    30                                  
    31                                           ;初始化描述符表寄存器GDTR
    32 00000058 2EC706[177D]1F00                 mov word [cs: gdt_size+0x7c00],31  ;描述符表的界限（总字节数减一）   
    33                                                                               
    34 0000005F 2E0F0116[177D]                   lgdt [cs: gdt_size+0x7c00]         ;GDTR 低16bit为界限，高32位为基址 
    35                                        
    36 00000065 E492                             in al,0x92                         ;南桥芯片内的端口 
    37 00000067 0C02                             or al,0000_0010B
    38 00000069 E692                             out 0x92,al                        ;打开A20
    39                                  
    40 0000006B FA                               cli                                ;保护模式下中断机制尚未建立，应 
    41                                                                              ;禁止中断 
    42 0000006C 0F20C0                           mov eax,cr0
    43 0000006F 6683C801                         or eax,1
    44 00000073 0F22C0                           mov cr0,eax                        ;设置PE位
    45                                        
    46                                           ;已经进入保护模式0x0008将解释为段选择子 EIP从flush处开始 
    47 00000076 66EA[7E000000]0800               jmp dword 0x0008:flush             ;16位的描述符选择子：32位偏移
    48                                           ;远转移会自动重置CS,此处自动将0x0008放到CS中,清流水线并串行化处理器 
    49                                           [bits 32] 
    50                                  
    51                                      flush:
    52 0000007E 66B91000                         mov cx,00000000000_10_000B         ;加载数据段选择子(0x10)
    53 00000082 8ED9                             mov ds,cx
    54                                  
    55 00000084 66B91800                         mov cx,00000000000_11_000B         ;加载堆栈段选择子
    56 00000088 8ED1                             mov ss,cx
    57 0000008A BC007C0000                       mov esp,0x7c00
    58                                   
    59                                   ;=============================================================================; 
    60                                           
    61 0000008F BF01000000                       mov edi,1                          ;阶乘数 
    62 00000094 B801000000                       mov eax,1
    63 00000099 31D2                             xor edx,edx
    64 0000009B 31DB                    	 xor ebx,ebx
    65 0000009D 31C9                    	 xor ecx,ecx
    66                                     mult:
    67                                           ;低32位相乘放在EBX:ECX中
    68 0000009F 52                      	 push edx
    69 000000A0 F7E7                    	 mul edi
    70 000000A2 89C1                    	 mov ecx,eax
    71 000000A4 89D3                    	 mov ebx,edx
    72                                  	 ;高32位相乘左移32位放到EDX:EAX中
    73 000000A6 58                      	 pop eax
    74 000000A7 F7E7                    	 mul edi
    75 000000A9 89C2                    	 mov edx,eax
    76 000000AB 31C0                    	 xor eax,eax
    77                                  	 ;EDX:EAX + EBX:ECX -> EDX:EAX
    78 000000AD 01C8                    	 add eax,ecx
    79 000000AF 11DA                    	 adc edx,ebx
    80                                  		 
    81 000000B1 47                      	 inc edi
    82 000000B2 83FF0F                  	 cmp edi,15
    83 000000B5 7EE8                             jle mult
    84                                           
    85                                   ;=============================================================================;        
    86                                  
    87 000000B7 66BF0100                         mov di,1                      ;控制相除次数			    
    88                                     divi:
    89 000000BB B90A000000                       mov ecx,10                     ;设置除数 
    90 000000C0 50                               push eax                       ;保存AX，32位的低16位 
    91 000000C1 89D0                             mov eax,edx
    92 000000C3 31D2                             xor edx,edx                     ;把DX扩展到DX:AX
    93 000000C5 F7F1                             div ecx
    94 000000C7 89C3                             mov ebx,eax                     ;保存高16位相除的商
    95 000000C9 58                               pop eax                        ;恢复低16位，不动高16位相除的余数 
    96 000000CA F7F1                             div ecx
    97 000000CC 88D1                             mov cl,dl                     ;保存真正余数到cx 
    98 000000CE 89DA                             mov edx,ebx                     ;恢复高16位的商,与AX组成整个结果的商 
    99                                                                       ;DX:AX组成下一轮的被除数 
   100 000000D0 80C130                           add cl,'0'
   101 000000D3 B50A                             mov ch,0x0a
   102 000000D5 6651                             push cx
   103 000000D7 6647                             inc di
   104 000000D9 6683FF0D                         cmp di,13
   105 000000DD 7EDC                             jle divi
   106                                           
   107 000000DF 6631DB                           xor bx,bx
   108                                    showMsg:
   109 000000E2 3E6667C707310F                   mov word [ds:bx+0],0x0f31          ;1 
   110 000000E9 3E6667C74702350F                 mov word [ds:bx+2],0x0f35          ;5
   111 000000F1 3E6667C74704210F                 mov word [ds:bx+4],0x0f21          ;!
   112 000000F9 3E6667C747063D0F                 mov word [ds:bx+6],0x0f3d          ;=
   113                                  
   114 00000101 66B90D00                         mov cx,13                          ;结果位数 
   115 00000105 66BB0800                         mov bx,8
   116                                    showNum:
   117 00000109 6658                             pop ax
   118 0000010B 3E66678907                       mov [ds:bx],ax
   119 00000110 6683C302                         add bx,2
   120 00000114 E2F3                             loop showNum
   121                                         
   122                                        
   123                                    ghalt:     
   124 00000116 F4                               hlt                                ;已经禁止中断，将不会被唤醒   
   125                                  ;-------------------------------------------------------------------------------
   126                                       
   127 00000117 0000                             gdt_size         dw 0
   128 00000119 007E0000                         gdt_base         dd 0x00007e00     ;GDT的物理地址 
   129                                                               
   130 0000011D 00<rept>                         times 510-($-$$) db 0
   131 000001FE 55AA                                              db 0x55,0xaa
