     1                                  ;计算1+2+3+...+10000
     2                                  
     3 00000000 E91F00                  jmp near start
     4                                  
     5                                  string: 
     6 00000003 312B322B332B2E2E2E-            db '1+2+3+...+9999+10000='
     6 0000000C 2B393939392B313030-
     6 00000015 30303D             
     7                                  number:
     8 00000018 000000000000000000-            db 0,0,0,0,0,0,0,0,0,0
     8 00000021 00                 
     9                                  
    10                                  start:
    11 00000022 B800B8                         mov ax,0xb800
    12 00000025 8EC0                           mov es,ax
    13 00000027 B8C007                         mov ax,0x07c0
    14 0000002A 8ED8                           mov ds,ax
    15                                  ;--------------------------------------------------------------------------;       
    16 0000002C BE[0300]                       mov si,string
    17 0000002F B91500                         mov cx,(number-string)
    18 00000032 31FF                           xor di,di                      
    19 00000034 B40F                           mov ah,0x0f
    20                                  ShowStr:
    21 00000036 8A04                           mov al,[si]
    22 00000038 268905                         mov [es:di],ax
    23 0000003B 83C702                         add di,2
    24 0000003E 46                             inc si
    25 0000003F E2F5                           loop ShowStr
    26                                  ;--------------------------------------------------------------------------;       
    27 00000041 B90100                         mov cx,1
    28 00000044 31C0                           xor ax,ax
    29 00000046 31D2                           xor dx,dx
    30                                  adda:
    31 00000048 01C8                           add ax,cx                     ;adc 除add外还要加上进位CF
    32 0000004A 83D200                         adc dx,0                      ;相当于DX:AX 32位组合寄存器 
    33 0000004D 41                             inc cx
    34 0000004E 81F91027                       cmp cx,10000                  ;比较cx,10000的大小，结果写入ZF,SF等 
    35 00000052 7EF4                           jle adda                      ;<=,ZF=1 and SF(符号,负数为1)!=OF(溢出)
    36                                  ;--------------------------------------------------------------------------;                         
    37 00000054 BB0000                         mov bx,0x00
    38 00000057 8ED3                           mov ss,bx                     ;定义一个栈 
    39 00000059 89DC                           mov sp,bx
    40                                                                       ;32位防溢出除法 
    41 0000005B BF0100                         mov di,1                      ;控制相除次数			    
    42                                  divi:
    43 0000005E B90A00                         mov cx,10                     ;设置除数 
    44 00000061 50                             push ax                       ;保存AX，32位的低16位 
    45 00000062 89D0                           mov ax,dx
    46 00000064 31D2                           xor dx,dx                     ;把DX扩展到DX:AX
    47 00000066 F7F1                           div cx
    48 00000068 89C3                           mov bx,ax                     ;保存高16位相除的商
    49 0000006A 58                             pop ax                        ;恢复低16位，不动高16位相除的余数 
    50 0000006B F7F1                           div cx
    51 0000006D 89D1                           mov cx,dx                     ;保存真正余数到cx 
    52 0000006F 89DA                           mov dx,bx                     ;恢复高16位的商,与AX组成整个结果的商 
    53                                                                       ;DX:AX组成下一轮的被除数 
    54 00000071 80C130                         add cl,'0'
    55 00000074 B50A                           mov ch,0x0a
    56 00000076 51                             push cx
    57 00000077 47                             inc di
    58 00000078 83FF08                         cmp di,8
    59 0000007B 7EE1                           jle divi
    60                                  ;-------------------------------------------------------------------------;      
    61 0000007D BE2C00                         mov si,(number-string+1)*2    ;显存偏移
    62 00000080 B90800                         mov cx,8						
    63                                   show:
    64 00000083 58                             pop ax     		     ;弹栈 
    65 00000084 268904                         mov word [es:si],ax	     ;送入显存
    66 00000087 83C602                         add si,2
    67 0000008A E2F7                           loop show
    68                                  ;-------------------------------------------------------------------------;       
    69 0000008C E9FDFF                         jmp near $
    70 0000008F 00<rept>                       times 510-($-$$) db 0
    71 000001FE 55AA                           dw 0xaa55
    72                                         
    73                                  ;-------------------------------------------------------------------------;
    74                                  ;关于32位除法公式推导: X/N=int (H/N)*2^16 + [rem(H/N)*2^16+L]/N
    75                                  ;其中int(H/N)代表商，rem(H/N)代表余数,X被拆分为高16位H和低16位L 
    76                                  ;X=H*65536+L 
    77                                  ;X/N=(H*65536+L)/N 
    78                                  ;   =[(AN+B)/N]*65536+L/N    其中H/N=A......B 
    79                                  ;   =[A+B/N]*65536+L/N
    80                                  ;   =A*65536+B/N*65536+L/N 
    81                                  ;   =A*2^16+(B*2^16+L)/N     其中A=int(H/N), B=rem(H/N) 
