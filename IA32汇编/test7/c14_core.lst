     1                                           ;代码清单14-1
     2                                           ;文件名：c14_core.asm
     3                                           ;文件说明：保护模式微型核心程序 
     4                                           ;创建日期：2011-11-6 18:37
     5                                  
     6                                           ;以下常量定义部分。内核的大部分内容都应当固定 
     7                                           core_code_seg_sel     equ  0x38    ;内核代码段选择子
     8                                           core_data_seg_sel     equ  0x30    ;内核数据段选择子 
     9                                           sys_routine_seg_sel   equ  0x28    ;系统公共例程代码段的选择子 
    10                                           video_ram_seg_sel     equ  0x20    ;视频显示缓冲区的段选择子
    11                                           core_stack_seg_sel    equ  0x18    ;内核堆栈段选择子
    12                                           mem_0_4_gb_seg_sel    equ  0x08    ;整个0-4GB内存的段的选择子
    13                                  
    14                                  ;-------------------------------------------------------------------------------
    15                                           ;以下是系统核心的头部，用于加载核心程序 
    16 00000000 [00000000]                       core_length      dd core_end       ;核心程序总长度#00
    17                                  
    18 00000004 [00000000]                       sys_routine_seg  dd section.sys_routine.start
    19                                                                              ;系统公用例程段位置#04
    20                                  
    21 00000008 [00000000]                       core_data_seg    dd section.core_data.start
    22                                                                              ;核心数据段位置#08
    23                                  
    24 0000000C [00000000]                       core_code_seg    dd section.core_code.start
    25                                                                              ;核心代码段位置#0c
    26                                  
    27                                  
    28 00000010 [99030000]                       core_entry       dd start          ;核心代码段入口点#10
    29 00000014 3800                                              dw core_code_seg_sel
    30                                  
    31                                  ;===============================================================================
    32                                           [bits 32]
    33                                  ;===============================================================================
    34                                  SECTION sys_routine vstart=0                ;系统公共例程代码段 
    35                                  ;-------------------------------------------------------------------------------
    36                                           ;字符串显示例程
    37                                  put_string:                                 ;显示0终止的字符串并移动光标 
    38                                                                              ;输入：DS:EBX=串地址
    39 00000000 51                               push ecx
    40                                    .getc:
    41 00000001 8A0B                             mov cl,[ebx]
    42 00000003 08C9                             or cl,cl
    43 00000005 7408                             jz .exit
    44 00000007 E805000000                       call put_char
    45 0000000C 43                               inc ebx
    46 0000000D EBF2                             jmp .getc
    47                                  
    48                                    .exit:
    49 0000000F 59                               pop ecx
    50 00000010 CB                               retf                               ;段间返回
    51                                  
    52                                  ;-------------------------------------------------------------------------------
    53                                  put_char:                                   ;在当前光标处显示一个字符,并推进
    54                                                                              ;光标。仅用于段内调用 
    55                                                                              ;输入：CL=字符ASCII码 
    56 00000011 60                               pushad
    57                                  
    58                                           ;以下取当前光标位置
    59 00000012 66BAD403                         mov dx,0x3d4
    60 00000016 B00E                             mov al,0x0e
    61 00000018 EE                               out dx,al
    62 00000019 6642                             inc dx                             ;0x3d5
    63 0000001B EC                               in al,dx                           ;高字
    64 0000001C 88C4                             mov ah,al
    65                                  
    66 0000001E 664A                             dec dx                             ;0x3d4
    67 00000020 B00F                             mov al,0x0f
    68 00000022 EE                               out dx,al
    69 00000023 6642                             inc dx                             ;0x3d5
    70 00000025 EC                               in al,dx                           ;低字
    71 00000026 6689C3                           mov bx,ax                          ;BX=代表光标位置的16位数
    72                                  
    73 00000029 80F90D                           cmp cl,0x0d                        ;回车符？
    74 0000002C 750E                             jnz .put_0a
    75 0000002E 6689D8                           mov ax,bx
    76 00000031 B350                             mov bl,80
    77 00000033 F6F3                             div bl
    78 00000035 F6E3                             mul bl
    79 00000037 6689C3                           mov bx,ax
    80 0000003A EB60                             jmp .set_cursor
    81                                  
    82                                    .put_0a:
    83 0000003C 80F90A                           cmp cl,0x0a                        ;换行符？
    84 0000003F 7506                             jnz .put_other
    85 00000041 6683C350                         add bx,80
    86 00000045 EB15                             jmp .roll_screen
    87                                  
    88                                    .put_other:                               ;正常显示字符
    89 00000047 06                               push es
    90 00000048 B820000000                       mov eax,video_ram_seg_sel          ;0xb8000段的选择子
    91 0000004D 8EC0                             mov es,eax
    92 0000004F 66D1E3                           shl bx,1
    93 00000052 2667880F                         mov [es:bx],cl
    94 00000056 07                               pop es
    95                                  
    96                                           ;以下将光标位置推进一个字符
    97 00000057 66D1EB                           shr bx,1
    98 0000005A 6643                             inc bx
    99                                  
   100                                    .roll_screen:
   101 0000005C 6681FBD007                       cmp bx,2000                        ;光标超出屏幕？滚屏
   102 00000061 7C39                             jl .set_cursor
   103                                  
   104 00000063 1E                               push ds
   105 00000064 06                               push es
   106 00000065 B820000000                       mov eax,video_ram_seg_sel
   107 0000006A 8ED8                             mov ds,eax
   108 0000006C 8EC0                             mov es,eax
   109 0000006E FC                               cld
   110 0000006F BEA0000000                       mov esi,0xa0                       ;小心！32位模式下movsb/w/d 
   111 00000074 BF00000000                       mov edi,0x00                       ;使用的是esi/edi/ecx 
   112 00000079 B980070000                       mov ecx,1920
   113 0000007E F3A5                             rep movsd
   114 00000080 66BB000F                         mov bx,3840                        ;清除屏幕最底一行
   115 00000084 B950000000                       mov ecx,80                         ;32位程序应该使用ECX
   116                                    .cls:
   117 00000089 266667C7072007                   mov word[es:bx],0x0720
   118 00000090 6683C302                         add bx,2
   119 00000094 E2F3                             loop .cls
   120                                  
   121 00000096 07                               pop es
   122 00000097 1F                               pop ds
   123                                  
   124 00000098 66BB8007                         mov bx,1920
   125                                  
   126                                    .set_cursor:
   127 0000009C 66BAD403                         mov dx,0x3d4
   128 000000A0 B00E                             mov al,0x0e
   129 000000A2 EE                               out dx,al
   130 000000A3 6642                             inc dx                             ;0x3d5
   131 000000A5 88F8                             mov al,bh
   132 000000A7 EE                               out dx,al
   133 000000A8 664A                             dec dx                             ;0x3d4
   134 000000AA B00F                             mov al,0x0f
   135 000000AC EE                               out dx,al
   136 000000AD 6642                             inc dx                             ;0x3d5
   137 000000AF 88D8                             mov al,bl
   138 000000B1 EE                               out dx,al
   139                                  
   140 000000B2 61                               popad
   141                                           
   142 000000B3 C3                               ret                                
   143                                  
   144                                  ;-------------------------------------------------------------------------------
   145                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   146                                                                              ;EAX=逻辑扇区号
   147                                                                              ;DS:EBX=目标缓冲区地址
   148                                                                              ;返回：EBX=EBX+512
   149 000000B4 50                               push eax 
   150 000000B5 51                               push ecx
   151 000000B6 52                               push edx
   152                                        
   153 000000B7 50                               push eax
   154                                           
   155 000000B8 66BAF201                         mov dx,0x1f2
   156 000000BC B001                             mov al,1
   157 000000BE EE                               out dx,al                          ;读取的扇区数
   158                                  
   159 000000BF 6642                             inc dx                             ;0x1f3
   160 000000C1 58                               pop eax
   161 000000C2 EE                               out dx,al                          ;LBA地址7~0
   162                                  
   163 000000C3 6642                             inc dx                             ;0x1f4
   164 000000C5 B108                             mov cl,8
   165 000000C7 D3E8                             shr eax,cl
   166 000000C9 EE                               out dx,al                          ;LBA地址15~8
   167                                  
   168 000000CA 6642                             inc dx                             ;0x1f5
   169 000000CC D3E8                             shr eax,cl
   170 000000CE EE                               out dx,al                          ;LBA地址23~16
   171                                  
   172 000000CF 6642                             inc dx                             ;0x1f6
   173 000000D1 D3E8                             shr eax,cl
   174 000000D3 0CE0                             or al,0xe0                         ;第一硬盘  LBA地址27~24
   175 000000D5 EE                               out dx,al
   176                                  
   177 000000D6 6642                             inc dx                             ;0x1f7
   178 000000D8 B020                             mov al,0x20                        ;读命令
   179 000000DA EE                               out dx,al
   180                                  
   181                                    .waits:
   182 000000DB EC                               in al,dx
   183 000000DC 2488                             and al,0x88
   184 000000DE 3C08                             cmp al,0x08
   185 000000E0 75F9                             jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   186                                  
   187 000000E2 B900010000                       mov ecx,256                        ;总共要读取的字数
   188 000000E7 66BAF001                         mov dx,0x1f0
   189                                    .readw:
   190 000000EB 66ED                             in ax,dx
   191 000000ED 668903                           mov [ebx],ax
   192 000000F0 83C302                           add ebx,2
   193 000000F3 E2F6                             loop .readw
   194                                  
   195 000000F5 5A                               pop edx
   196 000000F6 59                               pop ecx
   197 000000F7 58                               pop eax
   198                                        
   199 000000F8 CB                               retf                               ;段间返回 
   200                                  
   201                                  ;-------------------------------------------------------------------------------
   202                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   203                                  put_hex_dword:                              ;在当前光标处以十六进制形式显示
   204                                                                              ;一个双字并推进光标 
   205                                                                              ;输入：EDX=要转换并显示的数字
   206                                                                              ;输出：无
   207 000000F9 60                               pushad
   208 000000FA 1E                               push ds
   209                                        
   210 000000FB 66B83000                         mov ax,core_data_seg_sel           ;切换到核心数据段 
   211 000000FF 8ED8                             mov ds,ax
   212                                        
   213 00000101 BB[2B050000]                     mov ebx,bin_hex                    ;指向核心数据段内的转换表
   214 00000106 B908000000                       mov ecx,8
   215                                    .xlt:    
   216 0000010B C1C204                           rol edx,4
   217 0000010E 89D0                             mov eax,edx
   218 00000110 83E00F                           and eax,0x0000000f
   219 00000113 D7                               xlat
   220                                        
   221 00000114 51                               push ecx
   222 00000115 88C1                             mov cl,al                           
   223 00000117 E8F5FEFFFF                       call put_char
   224 0000011C 59                               pop ecx
   225                                         
   226 0000011D E2EC                             loop .xlt
   227                                        
   228 0000011F 1F                               pop ds
   229 00000120 61                               popad
   230 00000121 CB                               retf
   231                                        
   232                                  ;-------------------------------------------------------------------------------
   233                                  allocate_memory:                            ;分配内存
   234                                                                              ;输入：ECX=希望分配的字节数
   235                                                                              ;输出：ECX=起始线性地址 
   236 00000122 1E                               push ds
   237 00000123 50                               push eax
   238 00000124 53                               push ebx
   239                                        
   240 00000125 B830000000                       mov eax,core_data_seg_sel
   241 0000012A 8ED8                             mov ds,eax
   242                                        
   243 0000012C A1[06000000]                     mov eax,[ram_alloc]
   244 00000131 01C8                             add eax,ecx                        ;下一次分配时的起始地址
   245                                        
   246                                           ;这里应当有检测可用内存数量的指令
   247                                            
   248 00000133 8B0D[06000000]                   mov ecx,[ram_alloc]                ;返回分配的起始地址
   249                                  
   250 00000139 89C3                             mov ebx,eax
   251 0000013B 83E3FC                           and ebx,0xfffffffc
   252 0000013E 83C304                           add ebx,4                          ;强制对齐 
   253 00000141 A903000000                       test eax,0x00000003                ;下次分配的起始地址最好是4字节对齐
   254 00000146 0F45C3                           cmovnz eax,ebx                     ;如果没有对齐，则强制对齐 
   255 00000149 A3[06000000]                     mov [ram_alloc],eax                ;下次从该地址分配内存
   256                                                                              ;cmovcc指令可以避免控制转移 
   257 0000014E 5B                               pop ebx
   258 0000014F 58                               pop eax
   259 00000150 1F                               pop ds
   260                                  
   261 00000151 CB                               retf
   262                                  
   263                                  ;-------------------------------------------------------------------------------
   264                                  set_up_gdt_descriptor:                      ;在GDT内安装一个新的描述符
   265                                                                              ;输入：EDX:EAX=描述符 
   266                                                                              ;输出：CX=描述符的选择子
   267 00000152 50                               push eax
   268 00000153 53                               push ebx
   269 00000154 52                               push edx
   270                                  
   271 00000155 1E                               push ds
   272 00000156 06                               push es
   273                                  
   274 00000157 BB30000000                       mov ebx,core_data_seg_sel          ;切换到核心数据段
   275 0000015C 8EDB                             mov ds,ebx
   276                                  
   277 0000015E 0F0105[00000000]                 sgdt [pgdt]                        ;以便开始处理GDT
   278                                  
   279 00000165 BB08000000                       mov ebx,mem_0_4_gb_seg_sel
   280 0000016A 8EC3                             mov es,ebx
   281                                  
   282 0000016C 0FB71D[00000000]                 movzx ebx,word [pgdt]              ;GDT界限
   283 00000173 6643                             inc bx                             ;GDT总字节数，也是下一个描述符偏移
   284 00000175 031D[02000000]                   add ebx,[pgdt+2]                   ;下一个描述符的线性地址(偏移+基址)
   285                                  
   286 0000017B 268903                           mov [es:ebx],eax
   287 0000017E 26895304                         mov [es:ebx+4],edx
   288                                  
   289 00000182 668305[00000000]08               add word [pgdt],8                  ;增加一个描述符的大小
   290                                  
   291 0000018A 0F0115[00000000]                 lgdt [pgdt]                        ;对GDT的更改生效
   292                                  
   293 00000191 66A1[00000000]                   mov ax,[pgdt]                      ;得到GDT界限值
   294 00000197 6631D2                           xor dx,dx
   295 0000019A 66BB0800                         mov bx,8
   296 0000019E 66F7F3                           div bx                             ;除以8，去掉余数
   297 000001A1 6689C1                           mov cx,ax
   298 000001A4 66C1E103                         shl cx,3                           ;将索引号移到正确位置
   299                                  
   300 000001A8 07                               pop es
   301 000001A9 1F                               pop ds
   302                                  
   303 000001AA 5A                               pop edx
   304 000001AB 5B                               pop ebx
   305 000001AC 58                               pop eax
   306                                  
   307 000001AD CB                               retf
   308                                  ;-------------------------------------------------------------------------------
   309                                  make_seg_descriptor:                        ;构造存储器和系统的段描述符
   310                                                                              ;输入：EAX=线性基地址
   311                                                                              ;      EBX=段界限
   312                                                                              ;      ECX=属性。各属性位都在原始
   313                                                                              ;          位置，无关的位清零 
   314                                                                              ;返回：EDX:EAX=描述符
   315 000001AE 89C2                             mov edx,eax
   316 000001B0 C1E010                           shl eax,16
   317 000001B3 6609D8                           or ax,bx                           ;描述符前32位(EAX)构造完毕
   318                                  
   319 000001B6 81E20000FFFF                     and edx,0xffff0000                 ;清除基地址中无关的位
   320 000001BC C1C208                           rol edx,8
   321 000001BF 0FCA                             bswap edx                          ;装配基址的31~24和23~16  (80486+)
   322                                  
   323 000001C1 6631DB                           xor bx,bx
   324 000001C4 09DA                             or edx,ebx                         ;装配段界限的高4位
   325                                  
   326 000001C6 09CA                             or edx,ecx                         ;装配属性
   327                                  
   328 000001C8 CB                               retf
   329                                  
   330                                  ;-------------------------------------------------------------------------------
   331                                  make_gate_descriptor:                       ;构造门的描述符（调用门等）
   332                                                                              ;输入：EAX=门代码在段内偏移地址
   333                                                                              ;       BX=门代码所在段的选择子 
   334                                                                              ;       CX=段类型及属性等（各属
   335                                                                              ;          性位都在原始位置）
   336                                                                              ;返回：EDX:EAX=完整的描述符
   337 000001C9 53                               push ebx
   338 000001CA 51                               push ecx
   339                                        
   340 000001CB 89C2                             mov edx,eax
   341 000001CD 81E20000FFFF                     and edx,0xffff0000                 ;得到偏移地址高16位 
   342 000001D3 6609CA                           or dx,cx                           ;组装属性部分到EDX
   343                                           ;高32位组装完毕
   344 000001D6 25FFFF0000                       and eax,0x0000ffff                 ;得到偏移地址低16位 
   345 000001DB C1E310                           shl ebx,16                         ;段选择子应在高16位
   346 000001DE 09D8                             or eax,ebx                         ;组装段选择子部分
   347                                        
   348 000001E0 59                               pop ecx
   349 000001E1 5B                               pop ebx
   350                                        
   351 000001E2 CB                               retf                                   
   352                                                               
   353                                  sys_routine_end:
   354                                  
   355                                  ;===============================================================================
   356                                  SECTION core_data vstart=0                  ;系统核心的数据段 
   357                                  ;------------------------------------------------------------------------------- 
   358 00000000 0000                             pgdt             dw  0             ;用于设置和修改GDT 
   359 00000002 00000000                                          dd  0
   360                                  
   361 00000006 00001000                         ram_alloc        dd  0x00100000    ;下次分配内存时的起始地址
   362                                  
   363                                           ;符号地址检索表
   364                                           salt:
   365 0000000A 405072696E74537472-              salt_1           db  '@PrintString'
   365 00000013 696E67             
   366 00000016 00<rept>                                     times 256-($-salt_1) db 0
   367 0000010A [00000000]                                        dd  put_string
   368 0000010E 2800                                              dw  sys_routine_seg_sel
   369                                  
   370 00000110 40526561644469736B-              salt_2           db  '@ReadDiskData'
   370 00000119 44617461           
   371 0000011D 00<rept>                                     times 256-($-salt_2) db 0
   372 00000210 [B4000000]                                        dd  read_hard_disk_0
   373 00000214 2800                                              dw  sys_routine_seg_sel
   374                                  
   375 00000216 405072696E7444776F-              salt_3           db  '@PrintDwordAsHexString'
   375 0000021F 726441734865785374-
   375 00000228 72696E67           
   376 0000022C 00<rept>                                     times 256-($-salt_3) db 0
   377 00000316 [F9000000]                                        dd  put_hex_dword
   378 0000031A 2800                                              dw  sys_routine_seg_sel
   379                                  
   380 0000031C 405465726D696E6174-              salt_4           db  '@TerminateProgram'
   380 00000325 6550726F6772616D   
   381 0000032D 00<rept>                                     times 256-($-salt_4) db 0
   382 0000041C [C9040000]                                        dd  return_point
   383 00000420 3800                                              dw  core_code_seg_sel
   384                                  
   385                                           salt_item_len   equ $-salt_4
   386                                           salt_items      equ ($-salt)/salt_item_len
   387                                  
   388 00000422 2020496620796F7520-              message_1        db  '  If you seen this message,that means we '
   388 0000042B 7365656E2074686973-
   388 00000434 206D6573736167652C-
   388 0000043D 74686174206D65616E-
   388 00000446 7320776520         
   389 0000044B 617265206E6F772069-                               db  'are now in protect mode,and the system '
   389 00000454 6E2070726F74656374-
   389 0000045D 206D6F64652C616E64-
   389 00000466 207468652073797374-
   389 0000046F 656D20             
   390 00000472 636F7265206973206C-                               db  'core is loaded,and the video display '
   390 0000047B 6F616465642C616E64-
   390 00000484 207468652076696465-
   390 0000048D 6F20646973706C6179-
   390 00000496 20                 
   391 00000497 726F7574696E652077-                               db  'routine works perfectly.',0x0d,0x0a,0
   391 000004A0 6F726B732070657266-
   391 000004A9 6563746C792E0D0A00 
   392                                  
   393 000004B2 202053797374656D20-              message_2        db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   393 000004BB 776964652043414C4C-
   393 000004C4 2D47415445206D6F75-
   393 000004CD 6E7465642E0D0A00   
   394                                           
   395 000004D5 0D0A20204C6F616469-              message_3        db  0x0d,0x0a,'  Loading user program...',0
   395 000004DE 6E6720757365722070-
   395 000004E7 726F6772616D2E2E2E-
   395 000004F0 00                 
   396                                           
   397 000004F1 446F6E652E0D0A00                 do_status        db  'Done.',0x0d,0x0a,0
   398                                           
   399 000004F9 0D0A0D0A0D0A                     message_6        db  0x0d,0x0a,0x0d,0x0a,0x0d,0x0a
   400 000004FF 202055736572207072-                               db  '  User program terminated,control returned.',0
   400 00000508 6F6772616D20746572-
   400 00000511 6D696E617465642C63-
   400 0000051A 6F6E74726F6C207265-
   400 00000523 7475726E65642E00   
   401                                  
   402 0000052B 303132333435363738-              bin_hex          db '0123456789ABCDEF'
   402 00000534 39414243444546     
   403                                                                              ;put_hex_dword子过程用的查找表 
   404                                  
   405 0000053B 00<rept>                         core_buf   times 2048 db 0         ;内核用的缓冲区
   406                                  
   407 00000D3B 00000000                         esp_pointer      dd 0              ;内核用来临时保存自己的栈指针     
   408                                  
   409 00000D3F 0D0A202000                       cpu_brnd0        db 0x0d,0x0a,'  ',0
   410 00000D44 00<rept>                         cpu_brand  times 52 db 0
   411 00000D78 0D0A0D0A00                       cpu_brnd1        db 0x0d,0x0a,0x0d,0x0a,0
   412                                  
   413                                           ;任务控制块链
   414 00000D7D 00000000                         tcb_chain        dd  0;每个任务有一个TCB，TCB用于记录任务更多的详细信息，
   415                                  		                       ;与TSS不同TSS用于处理器访问，且只记录当前任务状态的必要信息，
   416                                  							   ;而且是动态变化的，TCB是人为定义的，记录的信息方便我们自己使用
   417                                  
   418                                  core_data_end:
   419                                                 
   420                                  ;===============================================================================
   421                                  SECTION core_code vstart=0
   422                                  ;-------------------------------------------------------------------------------
   423                                  fill_descriptor_in_ldt:                     ;在LDT内安装一个新的描述符
   424                                                                              ;输入：EDX:EAX=描述符
   425                                                                              ;      EBX=TCB基地址(任务对应TCB线性基地址)
   426                                                                              ;输出：CX=描述符的选择子
   427 00000000 50                               push eax
   428 00000001 52                               push edx
   429 00000002 57                               push edi
   430 00000003 1E                               push ds
   431                                  
   432 00000004 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   433 00000009 8ED9                             mov ds,ecx
   434                                  
   435 0000000B 8B7B0C                           mov edi,[ebx+0x0c]                 ;获得LDT基地址(从对应TCB偏移0x0c处获取)
   436                                           
   437 0000000E 31C9                             xor ecx,ecx
   438 00000010 668B4B0A                         mov cx,[ebx+0x0a]                  ;获得LDT界限(LTD与TCB都是相对一个任务的)使用cx防止界限超过16位
   439 00000014 6641                             inc cx                             ;LDT的总字节数(LTD+1)，即新描述符偏移地址
   440                                           
   441 00000016 89040F                           mov [edi+ecx+0x00],eax
   442 00000019 89540F04                         mov [edi+ecx+0x04],edx             ;安装描述符
   443                                  
   444 0000001D 6683C108                         add cx,8                           
   445 00000021 6649                             dec cx                             ;得到新的LDT界限值 
   446                                  
   447 00000023 66894B0A                         mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   448                                  
   449 00000027 6689C8                           mov ax,cx
   450 0000002A 6631D2                           xor dx,dx
   451 0000002D 66B90800                         mov cx,8
   452 00000031 66F7F1                           div cx                             ;获得选择子
   453                                           
   454 00000034 6689C1                           mov cx,ax
   455 00000037 66C1E103                         shl cx,3                           ;左移3位，并且
   456 0000003B 6683C904                         or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00//RPL最终变到3
   457                                  
   458 0000003F 1F                               pop ds
   459 00000040 5F                               pop edi
   460 00000041 5A                               pop edx
   461 00000042 58                               pop eax
   462                                       
   463 00000043 C3                               ret
   464                                        
   465                                  ;------------------------------------------------------------------------------- 
   466                                  ;===============================================================================
   467                                  ;这一次内核将用户程序特权级定位3
   468                                  ;===============================================================================
   469                                  load_relocate_program:                      ;加载并重定位用户程序
   470                                                                              ;输入: PUSH 逻辑扇区号
   471                                                                              ;      PUSH 任务控制块基地址 
   472                                                                              ;输出：无 
   473                                  											;44(调用者返回地址EIP,内部过程无需CS压栈)
   474 00000044 60                               pushad                             ;40(8寄存器)
   475                                         
   476 00000045 1E                               push ds                            ;8  (按32位压入)                       
   477 00000046 06                               push es                            ;4
   478                                        
   479 00000047 89E5                             mov ebp,esp                        ;从栈顶访问
   480                                        
   481 00000049 B908000000                       mov ecx,mem_0_4_gb_seg_sel
   482 0000004E 8EC1                             mov es,ecx
   483                                        
   484 00000050 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   485                                  
   486                                           ;以下申请创建LDT所需要的内存
   487 00000053 B9A0000000                       mov ecx,160                        ;允许安装20个LDT描述符
   488 00000058 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   489 0000005F 26894E0C                         mov [es:esi+0x0c],ecx              ;登记LDT基地址到TCB中
   490 00000063 2666C7460AFFFF                   mov word [es:esi+0x0a],0xffff      ;登记LDT初始的界限到TCB中 
   491                                  
   492                                           ;以下开始加载用户程序 
   493 0000006A B830000000                       mov eax,core_data_seg_sel
   494 0000006F 8ED8                             mov ds,eax                         ;切换DS到内核数据段
   495                                         
   496 00000071 8B4530                           mov eax,[ebp+12*4]                 ;从堆栈中取出用户程序起始扇区号 
   497 00000074 BB[3B050000]                     mov ebx,core_buf                   ;读取程序头部数据     
   498 00000079 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   499                                  
   500                                           ;以下判断整个程序有多大
   501 00000080 A1[3B050000]                     mov eax,[core_buf]                 ;程序尺寸
   502 00000085 89C3                             mov ebx,eax
   503 00000087 81E300FEFFFF                     and ebx,0xfffffe00                 ;使之512字节对齐（能被512整除的数低 
   504 0000008D 81C300020000                     add ebx,512                        ;9位都为0 
   505 00000093 A9FF010000                       test eax,0x000001ff                ;程序的大小正好是512的倍数吗? 
   506 00000098 0F45C3                           cmovnz eax,ebx                     ;不是。使用凑整的结果
   507                                        
   508 0000009B 89C1                             mov ecx,eax                        ;实际需要申请的内存数量
   509 0000009D 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   510 000000A4 26894E06                         mov [es:esi+0x06],ecx              ;登记程序加载基地址到TCB中(esi:TCB线性基址)
   511                                        
   512 000000A8 89CB                             mov ebx,ecx                        ;ebx -> 申请到的内存首地址
   513 000000AA 31D2                             xor edx,edx
   514 000000AC B900020000                       mov ecx,512
   515 000000B1 F7F1                             div ecx
   516 000000B3 89C1                             mov ecx,eax                        ;总扇区数 
   517                                        
   518 000000B5 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;切换DS到0-4GB的段
   519 000000BA 8ED8                             mov ds,eax
   520                                  
   521 000000BC 8B4530                           mov eax,[ebp+12*4]                 ;起始扇区号 
   522                                    .b1:
   523 000000BF 9A[B4000000]2800                 call sys_routine_seg_sel:read_hard_disk_0
   524 000000C6 40                               inc eax
   525 000000C7 E2F6                             loop .b1                           ;循环读，直到读完整个用户程序
   526                                  
   527 000000C9 268B7E06                         mov edi,[es:esi+0x06]              ;获得程序加载基地址
   528                                  
   529                                           ;建立程序头部段描述符
   530 000000CD 89F8                             mov eax,edi                        ;程序头部起始线性地址
   531 000000CF 8B5F04                           mov ebx,[edi+0x04]                 ;段长度
   532 000000D2 4B                               dec ebx                            ;段界限
   533 000000D3 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3 
   534 000000D8 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   535                                        
   536                                           ;安装头部段描述符到LDT中 
   537 000000DF 89F3                             mov ebx,esi                        ;TCB的基地址
   538 000000E1 E81AFFFFFF                       call fill_descriptor_in_ldt
   539                                  
   540 000000E6 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   541 000000EA 2666894E44                       mov [es:esi+0x44],cx               ;登记程序头部段选择子到TCB 
   542 000000EF 66894F04                         mov [edi+0x04],cx                  ;和头部内 
   543                                        
   544                                           ;建立程序代码段描述符
   545 000000F3 89F8                             mov eax,edi
   546 000000F5 034714                           add eax,[edi+0x14]                 ;代码起始线性地址
   547 000000F8 8B5F18                           mov ebx,[edi+0x18]                 ;段长度
   548 000000FB 4B                               dec ebx                            ;段界限
   549 000000FC B900F84000                       mov ecx,0x0040f800                 ;字节粒度的代码段描述符，特权级3
   550 00000101 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   551 00000108 89F3                             mov ebx,esi                        ;TCB的基地址
   552 0000010A E8F1FEFFFF                       call fill_descriptor_in_ldt
   553 0000010F 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   554 00000113 66894F14                         mov [edi+0x14],cx                  ;登记代码段选择子到头部
   555                                  
   556                                           ;建立程序数据段描述符
   557 00000117 89F8                             mov eax,edi
   558 00000119 03471C                           add eax,[edi+0x1c]                 ;数据段起始线性地址
   559 0000011C 8B5F20                           mov ebx,[edi+0x20]                 ;段长度
   560 0000011F 4B                               dec ebx                            ;段界限 
   561 00000120 B900F24000                       mov ecx,0x0040f200                 ;字节粒度的数据段描述符，特权级3
   562 00000125 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   563 0000012C 89F3                             mov ebx,esi                        ;TCB的基地址
   564 0000012E E8CDFEFFFF                       call fill_descriptor_in_ldt
   565 00000133 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   566 00000137 66894F1C                         mov [edi+0x1c],cx                  ;登记数据段选择子到头部
   567                                  
   568                                           ;建立程序堆栈段描述符
   569 0000013B 8B4F0C                           mov ecx,[edi+0x0c]                 ;4KB的倍率 
   570 0000013E BBFFFF0F00                       mov ebx,0x000fffff                 ;以4k为单位，栈的上界
   571 00000143 29CB                             sub ebx,ecx                        ;得到段界限
   572 00000145 B800100000                       mov eax,4096                        
   573 0000014A F7E1                             mul ecx                         
   574 0000014C 89C1                             mov ecx,eax                        ;准备为堆栈分配内存 
   575 0000014E 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   576 00000155 01C8                             add eax,ecx                        ;得到堆栈的高端物理地址 
   577 00000157 B900F6C000                       mov ecx,0x00c0f600                 ;字节粒度的堆栈段描述符，特权级3
   578 0000015C 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   579 00000163 89F3                             mov ebx,esi                        ;TCB的基地址
   580 00000165 E896FEFFFF                       call fill_descriptor_in_ldt
   581 0000016A 6683C903                         or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   582 0000016E 66894F08                         mov [edi+0x08],cx                  ;登记堆栈段选择子到头部
   583                                  
   584                                           ;重定位SALT 
   585 00000172 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;这里和前一章不同，头部段描述符
   586 00000177 8EC0                             mov es,eax                         ;已安装，但还没有生效，故只能通
   587                                                                              ;过4GB段访问用户程序头部（LTD要加载到GDT中才有效，
   588                                  											;因为段寄存器中选择子都是GDT为准）          
   589 00000179 B830000000                       mov eax,core_data_seg_sel
   590 0000017E 8ED8                             mov ds,eax
   591                                        
   592 00000180 FC                               cld
   593                                  
   594 00000181 268B4F24                         mov ecx,[es:edi+0x24]              ;U-SALT条目数(通过访问4GB段取得) 
   595 00000185 83C728                           add edi,0x28                       ;U-SALT在4GB段内的起始地址 
   596                                    .b2: 
   597 00000188 51                               push ecx
   598 00000189 57                               push edi
   599                                        
   600 0000018A B904000000                       mov ecx,salt_items
   601 0000018F BE[0A000000]                     mov esi,salt
   602                                    .b3:
   603 00000194 57                               push edi
   604 00000195 56                               push esi
   605 00000196 51                               push ecx
   606                                  
   607 00000197 B940000000                       mov ecx,64                         ;检索表中，每条目的比较次数 
   608 0000019C F3A7                             repe cmpsd                         ;每次比较4字节 
   609 0000019E 7519                             jnz .b4
   610 000001A0 8B06                             mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   611 000001A2 26898700FFFFFF                   mov [es:edi-256],eax               ;将字符串改写成偏移地址 
   612 000001A9 668B4604                         mov ax,[esi+4]
   613 000001AD 6683C803                         or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门（表示该选择子由用户程序提供）
   614                                                                              ;故RPL=3 
   615 000001B1 2666898704FFFFFF                 mov [es:edi-252],ax                ;回填调用门选择子 
   616                                    .b4:
   617                                        
   618 000001B9 59                               pop ecx
   619 000001BA 5E                               pop esi
   620 000001BB 81C606010000                     add esi,salt_item_len
   621 000001C1 5F                               pop edi                            ;从头比较 
   622 000001C2 E2D0                             loop .b3
   623                                        
   624 000001C4 5F                               pop edi
   625 000001C5 81C700010000                     add edi,256
   626 000001CB 59                               pop ecx
   627 000001CC E2BA                             loop .b2
   628                                  
   629 000001CE 8B752C                           mov esi,[ebp+11*4]                 ;从堆栈中取得TCB的基地址
   630                                  
   631                                           ;创建0特权级堆栈
   632 000001D1 B900100000                       mov ecx,4096
   633 000001D6 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备 
   634 000001D8 26894E1A                         mov [es:esi+0x1a],ecx
   635 000001DC 26C16E1A0C                       shr dword [es:esi+0x1a],12         ;登记0特权级堆栈尺寸到TCB (以4k为单位)shr 12=/4096
   636 000001E1 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   637 000001E8 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   638 000001EA 2689461E                         mov [es:esi+0x1e],eax              ;登记0特权级堆栈基地址到TCB 
   639 000001EE BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）(ffff ffff-1000)/fff
   640 000001F3 B90096C000                       mov ecx,0x00c09600                 ;4KB粒度，读写，特权级0
   641 000001F8 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   642 000001FF 89F3                             mov ebx,esi                        ;TCB的基地址
   643 00000201 E8FAFDFFFF                       call fill_descriptor_in_ldt        ;加载到LTD中
   644 00000206 6683C900                         or cx,0000_0000_0000_0000          ;设置选择子的特权级为0
   645 0000020A 2666894E22                       mov [es:esi+0x22],cx               ;登记0特权级堆栈选择子到TCB
   646 0000020F 26C7462400000000                 mov dword [es:esi+0x24],0          ;登记0特权级堆栈初始ESP到TCB
   647                                        
   648                                           ;创建1特权级堆栈
   649 00000217 B900100000                       mov ecx,4096
   650 0000021C 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   651 0000021E 26894E28                         mov [es:esi+0x28],ecx
   652 00000222 2666C16E280C                     shr word [es:esi+0x28],12               ;登记1特权级堆栈尺寸到TCB
   653 00000228 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   654 0000022F 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   655 00000231 2689462C                         mov [es:esi+0x2c],eax              ;登记1特权级堆栈基地址到TCB
   656 00000235 BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   657 0000023A B900B6C000                       mov ecx,0x00c0b600                 ;4KB粒度，读写，特权级1
   658 0000023F 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   659 00000246 89F3                             mov ebx,esi                        ;TCB的基地址
   660 00000248 E8B3FDFFFF                       call fill_descriptor_in_ldt
   661 0000024D 6683C901                         or cx,0000_0000_0000_0001          ;设置选择子的特权级为1
   662 00000251 2666894E30                       mov [es:esi+0x30],cx               ;登记1特权级堆栈选择子到TCB
   663 00000256 26C7463200000000                 mov dword [es:esi+0x32],0          ;登记1特权级堆栈初始ESP到TCB
   664                                  
   665                                           ;创建2特权级堆栈
   666 0000025E B900100000                       mov ecx,4096
   667 00000263 89C8                             mov eax,ecx                        ;为生成堆栈高端地址做准备
   668 00000265 26894E36                         mov [es:esi+0x36],ecx
   669 00000269 2666C16E360C                     shr word [es:esi+0x36],12               ;登记2特权级堆栈尺寸到TCB
   670 0000026F 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   671 00000276 01C8                             add eax,ecx                        ;堆栈必须使用高端地址为基地址
   672 00000278 26894E3A                         mov [es:esi+0x3a],ecx              ;登记2特权级堆栈基地址到TCB
   673 0000027C BBFEFF0F00                       mov ebx,0xffffe                    ;段长度（界限）
   674 00000281 B900D6C000                       mov ecx,0x00c0d600                 ;4KB粒度，读写，特权级2
   675 00000286 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   676 0000028D 89F3                             mov ebx,esi                        ;TCB的基地址
   677 0000028F E86CFDFFFF                       call fill_descriptor_in_ldt
   678 00000294 6683C90A                         or cx,0000_0000_0000_0010          ;设置选择子的特权级为2
   679 00000298 2666894E3E                       mov [es:esi+0x3e],cx               ;登记2特权级堆栈选择子到TCB
   680 0000029D 26C7464000000000                 mov dword [es:esi+0x40],0          ;登记2特权级堆栈初始ESP到TCB
   681                                        
   682                                           ;在GDT中登记LDT描述符
   683 000002A5 268B460C                         mov eax,[es:esi+0x0c]              ;LDT的起始线性地址
   684 000002A9 260FB75E0A                       movzx ebx,word [es:esi+0x0a]       ;LDT段界限
   685 000002AE B900824000                       mov ecx,0x00408200                 ;LDT描述符，特权级0
   686 000002B3 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   687 000002BA 9A[52010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   688 000002C1 2666894E10                       mov [es:esi+0x10],cx               ;登记LDT选择子到TCB中
   689                                         
   690                                           ;创建用户程序的TSS
   691 000002C6 B968000000                       mov ecx,104                        ;tss的基本尺寸
   692 000002CB 2666894E12                       mov [es:esi+0x12],cx              
   693 000002D0 2666FF4E12                       dec word [es:esi+0x12]             ;登记TSS界限值到TCB -1
   694 000002D5 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   695 000002DC 26894E14                         mov [es:esi+0x14],ecx              ;登记TSS基地址到TCB
   696                                        
   697                                           ;登记基本的TSS表格内容
   698 000002E0 2666C7010000                     mov word [es:ecx+0],0              ;反向链=0
   699                                        
   700 000002E6 268B5624                         mov edx,[es:esi+0x24]              ;登记0特权级堆栈初始ESP
   701 000002EA 26895104                         mov [es:ecx+4],edx                 ;到TSS中
   702                                        
   703 000002EE 26668B5622                       mov dx,[es:esi+0x22]               ;登记0特权级堆栈段选择子
   704 000002F3 2666895108                       mov [es:ecx+8],dx                  ;到TSS中
   705                                        
   706 000002F8 268B5632                         mov edx,[es:esi+0x32]              ;登记1特权级堆栈初始ESP
   707 000002FC 2689510C                         mov [es:ecx+12],edx                ;到TSS中
   708                                  
   709 00000300 26668B5630                       mov dx,[es:esi+0x30]               ;登记1特权级堆栈段选择子
   710 00000305 2666895110                       mov [es:ecx+16],dx                 ;到TSS中
   711                                  
   712 0000030A 268B5640                         mov edx,[es:esi+0x40]              ;登记2特权级堆栈初始ESP
   713 0000030E 26895114                         mov [es:ecx+20],edx                ;到TSS中
   714                                  
   715 00000312 26668B563E                       mov dx,[es:esi+0x3e]               ;登记2特权级堆栈段选择子
   716 00000317 2666895118                       mov [es:ecx+24],dx                 ;到TSS中
   717                                  
   718 0000031C 26668B5610                       mov dx,[es:esi+0x10]               ;登记任务的LDT选择子
   719 00000321 2666895160                       mov [es:ecx+96],dx                 ;到TSS中
   720                                        
   721 00000326 26668B5612                       mov dx,[es:esi+0x12]               ;登记任务的I/O位图偏移
   722 0000032B 2666895166                       mov [es:ecx+102],dx                ;到TSS中 填的界限值表示不存在I/O许可位串
   723                                        
   724 00000330 2666C741640000                   mov word [es:ecx+100],0            ;T=0
   725                                         
   726                                           ;在GDT中登记TSS描述符
   727 00000337 268B4614                         mov eax,[es:esi+0x14]              ;TSS的起始线性地址
   728 0000033B 260FB75E12                       movzx ebx,word [es:esi+0x12]       ;段长度（界限）
   729 00000340 B900894000                       mov ecx,0x00408900                 ;TSS描述符，特权级0
   730 00000345 9A[AE010000]2800                 call sys_routine_seg_sel:make_seg_descriptor
   731 0000034C 9A[52010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor
   732 00000353 2666894E18                       mov [es:esi+0x18],cx               ;登记TSS选择子到TCB
   733                                  
   734 00000358 07                               pop es                             ;恢复到调用此过程前的es段 
   735 00000359 1F                               pop ds                             ;恢复到调用此过程前的ds段
   736                                        
   737 0000035A 61                               popad
   738                                        
   739 0000035B C20800                           ret 8                              ;丢弃调用本过程前压入的参数 
   740                                        
   741                                  ;-------------------------------------------------------------------------------
   742                                  append_to_tcb_link:                         ;在TCB链上追加任务控制块
   743                                                                              ;输入：ECX=TCB线性基地址
   744 0000035E 50                               push eax
   745 0000035F 52                               push edx
   746 00000360 1E                               push ds
   747 00000361 06                               push es
   748                                           
   749 00000362 B830000000                       mov eax,core_data_seg_sel          ;令DS指向内核数据段 
   750 00000367 8ED8                             mov ds,eax
   751 00000369 B808000000                       mov eax,mem_0_4_gb_seg_sel         ;令ES指向0..4GB段
   752 0000036E 8EC0                             mov es,eax
   753                                           
   754 00000370 26C70100000000                   mov dword [es: ecx+0x00],0         ;当前TCB指针域清零，以指示这是最
   755                                                                              ;后一个TCB
   756                                                                               
   757 00000377 A1[7D0D0000]                     mov eax,[tcb_chain]                ;TCB表头指针
   758 0000037C 09C0                             or eax,eax                         ;链表为空？
   759 0000037E 740E                             jz .notcb 
   760                                           
   761                                    .searc:
   762 00000380 89C2                             mov edx,eax                        ;edx为TCB头
   763 00000382 268B02                           mov eax,[es: edx+0x00]             ;如果是尾结点eax为0，否则eax为下一节点
   764 00000385 09C0                             or eax,eax               
   765 00000387 75F7                             jnz .searc
   766                                           
   767 00000389 26890A                           mov [es: edx+0x00],ecx              ;添加到尾结点
   768 0000038C EB06                             jmp .retpc
   769                                           
   770                                    .notcb:       
   771 0000038E 890D[7D0D0000]                   mov [tcb_chain],ecx                ;若为空表，直接令表头指针指向TCB
   772                                           
   773                                    .retpc:
   774 00000394 07                               pop es
   775 00000395 1F                               pop ds
   776 00000396 5A                               pop edx
   777 00000397 58                               pop eax
   778                                           
   779 00000398 C3                               ret
   780                                           
   781                                  ;-------------------------------------------------------------------------------
   782                                  start:
   783 00000399 B930000000                       mov ecx,core_data_seg_sel          ;使ds指向核心数据段 
   784 0000039E 8ED9                             mov ds,ecx
   785                                  
   786 000003A0 BB[22040000]                     mov ebx,message_1                    
   787 000003A5 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   788                                                                           
   789                                           ;显示处理器品牌信息 
   790 000003AC B802000080                       mov eax,0x80000002
   791 000003B1 0FA2                             cpuid
   792 000003B3 A3[440D0000]                     mov [cpu_brand + 0x00],eax
   793 000003B8 891D[480D0000]                   mov [cpu_brand + 0x04],ebx
   794 000003BE 890D[4C0D0000]                   mov [cpu_brand + 0x08],ecx
   795 000003C4 8915[500D0000]                   mov [cpu_brand + 0x0c],edx
   796                                        
   797 000003CA B803000080                       mov eax,0x80000003
   798 000003CF 0FA2                             cpuid
   799 000003D1 A3[540D0000]                     mov [cpu_brand + 0x10],eax
   800 000003D6 891D[580D0000]                   mov [cpu_brand + 0x14],ebx
   801 000003DC 890D[5C0D0000]                   mov [cpu_brand + 0x18],ecx
   802 000003E2 8915[600D0000]                   mov [cpu_brand + 0x1c],edx
   803                                  
   804 000003E8 B804000080                       mov eax,0x80000004
   805 000003ED 0FA2                             cpuid
   806 000003EF A3[640D0000]                     mov [cpu_brand + 0x20],eax
   807 000003F4 891D[680D0000]                   mov [cpu_brand + 0x24],ebx
   808 000003FA 890D[6C0D0000]                   mov [cpu_brand + 0x28],ecx
   809 00000400 8915[700D0000]                   mov [cpu_brand + 0x2c],edx
   810                                  
   811 00000406 BB[3F0D0000]                     mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   812 0000040B 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   813 00000412 BB[440D0000]                     mov ebx,cpu_brand
   814 00000417 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   815 0000041E BB[780D0000]                     mov ebx,cpu_brnd1
   816 00000423 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   817                                  
   818                                           ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   819                                  		 ;门个数与公共例程个数相同
   820 0000042A BF[0A000000]                     mov edi,salt                       ;C-SALT表的起始位置 
   821 0000042F B904000000                       mov ecx,salt_items                 ;C-SALT表的条目数量 
   822                                    .b3:
   823 00000434 51                               push ecx   
   824 00000435 8B8700010000                     mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
   825 0000043B 668B9F04010000                   mov bx,[edi+260]                   ;该条目入口点的段选择子 
   826 00000442 66B900EC                         mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3特权级以上程序的才
   827                                                                              ;允许访问该门)，0个参数(因为用寄存器
   828                                                                              ;传递参数，而没有用栈) 
   829 00000446 9A[C9010000]2800                 call sys_routine_seg_sel:make_gate_descriptor      ;构造门
   830 0000044D 9A[52010000]2800                 call sys_routine_seg_sel:set_up_gdt_descriptor     ;安装门（和安装GDT一样）
   831 00000454 66898F04010000                   mov [edi+260],cx                   ;将返回的门描述符选择子回填
   832                                  		                                    ;公共例程段选择子被替换成门选择子,以便在后面重定位U-SALT时
   833                                  											;回填调用门选择子，（用户只能通过门访问公共例程）
   834 0000045B 81C706010000                     add edi,salt_item_len              ;指向下一个C-SALT条目 
   835 00000461 59                               pop ecx
   836 00000462 E2D0                             loop .b3
   837                                  
   838                                           ;对门进行测试 
   839 00000464 BB[B2040000]                     mov ebx,message_2
   840 00000469 FF1D[0A010000]                   call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
   841                                        
   842 0000046F BB[D5040000]                     mov ebx,message_3                    
   843 00000474 9A[00000000]2800                 call sys_routine_seg_sel:put_string ;在内核中调用例程不需要通过门
   844                                        
   845                                           ;创建任务控制块。这不是处理器的要求，而是我们自己为了方便而设立的
   846 0000047B B946000000                       mov ecx,0x46                       ;控制块大小0x46B
   847 00000480 9A[22010000]2800                 call sys_routine_seg_sel:allocate_memory
   848 00000487 E8D2FEFFFF                       call append_to_tcb_link            ;将任务控制块追加到TCB链表 
   849                                        
   850 0000048C 6A32                             push dword 50                      ;用户程序位于逻辑50扇区
   851 0000048E 51                               push ecx                           ;压入任务控制块起始线性地址 
   852                                         
   853 0000048F E8B0FBFFFF                       call load_relocate_program        
   854                                        
   855 00000494 BB[F1040000]                     mov ebx,do_status
   856 00000499 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   857                                        
   858 000004A0 B808000000                       mov eax,mem_0_4_gb_seg_sel
   859 000004A5 8ED8                             mov ds,eax
   860                                        
   861 000004A7 0F005918                         ltr [ecx+0x18]                     ;加载任务状态段 ecx任务控制块地址
   862 000004AB 0F005110                         lldt [ecx+0x10]                    ;加载LDT
   863                                        
   864 000004AF 8B4144                           mov eax,[ecx+0x44]
   865 000004B2 8ED8                             mov ds,eax                         ;切换到用户程序头部段 
   866                                  		
   867                                  		
   868                                  		 ;要从当前0直接切换到3上是不允许的，通过假装调用门的方法转到用户程序
   869                                           ;以下假装是从调用门返回。摹仿处理器压入返回参数 
   870 000004B4 FF3508000000                     push dword [0x08]                  ;调用前的堆栈段选择子
   871 000004BA 6A00                             push dword 0                       ;调用前的esp
   872                                  
   873 000004BC FF3514000000                     push dword [0x14]                  ;调用前的代码段选择子 
   874 000004C2 FF3510000000                     push dword [0x10]                  ;调用前的eip(入口点)
   875                                        
   876 000004C8 CB                               retf
   877                                  
   878                                  return_point:                               ;用户程序返回点
   879 000004C9 B830000000                       mov eax,core_data_seg_sel          ;因为c14.asm是以JMP的方式使用调 
   880 000004CE 8ED8                             mov ds,eax                         ;用门@TerminateProgram，回到这 
   881                                                                              ;里时，特权级为3，会导致异常。 
   882 000004D0 BB[F9040000]                     mov ebx,message_6
   883 000004D5 9A[00000000]2800                 call sys_routine_seg_sel:put_string
   884                                  
   885 000004DC F4                               hlt
   886                                              
   887                                  core_code_end:
   888                                  
   889                                  ;-------------------------------------------------------------------------------
   890                                  SECTION core_trail
   891                                  ;-------------------------------------------------------------------------------
   892                                  core_end:
